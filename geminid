#!/bin/bash

export REQUEST_URI=$(head -n1 | tr -d '\r\n')

# if we have SNI, we use that for SERVER_NAME,
# otherwise we use what was in the gemini request.
if [ ! "${SSL_TLS_SNI}" ];then
  export SERVER_NAME="${SSL_TLS_SNI}"
else
  export SERVER_NAME="$(printf "%s\n" "$REQUEST_URI" | uricut -d)"
fi

# these don't work for stunnel.
#export REMOTE_ADDR="$(/usr/local/libexec/peerip | head -n1)"
#export REMOTE_PORT="$(/usr/local/libexec/peerip | tail -n1)"
#export SERVER_ADDR="$(/usr/local/libexec/sockip | head -n1)"
#export SERVER_PORT="$(/usr/local/libexec/sockip | tail -n1)"

#export IDENT="$(printf "$REMOTE_PORT, $SERVER_PORT\r\n" | nc $REMOTE_ADDR 113)"

#export IDENT="$(ident $SERVER_ADDR $REMOTE_ADDR 113 $REMTOE_PORT $SERVER_PORT)"
# usage: ident.sh our-host their-host 113 their-port our-port
## not sure exactly what this should contain.

REQUEST_DOMAIN="$(printf "%s\n" "${REQUEST_URI}" | uricut -d)"
REQUEST_PORT="$(printf "%s\n" "${REQUEST_URI}" | uricut -P)"
REQUEST_SCHEME="$(printf "%s\n" "${REQUEST_URI}" | uricut -s)"

if [ ! "${REQUEST_PORT}" ];then
  if [ "${REQUEST_SCHEME}" = "gemini" ];then
    REQUEST_PORT=1965
  fi
fi

if [ ! "${SERVER_PORT}" ];then ### this should get overridden by whatever runs this script.
  export SERVER_PORT=1965
fi

REQUEST_DP="${REQUEST_DOMAIN}:${REQUEST_PORT}"
SERVER_DP="${SSL_TLS_SNI}:${SERVER_PORT}"

if [ "${REQUEST_DP}" != "${SERVER_DP}" ];then
  if [ "${SSL_TLS_SNI}" = "epo.k.vu" ];then
    uristart "${REQUEST_URI}" 2>/dev/null
    exit 1
  fi
  printf "53 PROXY REQUEST REFUSED. I'm not that kind of server. (%s != %s)\r\n" "${REQUEST_DP}" "${SERVER_DP}"
  exit 1
fi


cd "/var/gemini/vhosts/${SERVER_NAME}" || cd "/var/gemini/sites/default"
## and then we set DOCUMENT_ROOT to that dir.
export DOCUMENT_ROOT="$(pwd)"
### response code then mime-type
path="$(printf "%s\n" "${REQUEST_URI}" | uricut -p)"
export SCHEME="gemini" #close enough?
export SCRIPT_NAME="$(printf "%s\n" "$REQUEST_URI" | uricut -p)"
export QUERY_STRING="$(printf "%s\n" "$REQUEST_URI" | uricut -q)"
if grep '^/~' <<< $path 2>&1 >/dev/null ;then
  user="$(printf "%s\n" "$path" | cut -d/ -f2 | tr -cd 'a-zA-Z')"
  path="$(printf "%s\n" "$path" | cut -d/ -f3-)"
  path="$(normalpath "/home/$user/public_gemini/$path")"
  if ! printf "%s\n" "$path" | grep '^/home/'"$user"'/public_gemini/' >/dev/null 2>&1;then
    printf '59 BAD REQUEST\r\n'
    exit 1
  fi
else
  unset user
  path="$(normalpath "${DOCUMENT_ROOT}/$path")"
  if ! printf "%s\n" "$path" | grep "^${DOCUMENT_ROOT}" >/dev/null 2>&1;then
    printf '59 BAD REQUEST\r\n'
    exit 1
  fi
fi
if [ -e "$path" ];then
  CONTENT_TYPE="$(mime-type "$path")"
  case "$CONTENT_TYPE" in
    inode/directory)
      if [ -f $path/.redirect ];then
        printf "30 %s\r\n" "$(cat "$path/.redirect")"
        exit 0
      fi
     printf "20 text/gemini\r\n"
     ###debug prints go here
     #printf "remote addr: %s\n" "${REMOTE_ADDR}"
     #env
     if [ -f "$path/index.gmi" ];then
       cat "$path/index.gmi"
     fi
     if [ -f "$path/.autogen" ];then
       printf "## autogenerated list of stuff in this directory.\r\n"
       if [ "$user" ];then
         find "$path" -maxdepth 1 -type d | cut -d/ -f5- | grep . | tr '\n' '\0' | xargs -r0 printf "=> /~${user}/%s#dir\r\n"
         find "$path" -maxdepth 1 -type f | cut -d/ -f5- | grep . | tr '\n' '\0' | xargs -r0 printf "=> /~${user}/%s#file\r\n"
         find "$path" -maxdepth 1 -type l | cut -d/ -f5- | grep . | tr '\n' '\0' | xargs -r0 printf "=> /~${user}/%s#link\r\n"
       else
         find "$path" -maxdepth 1 -type d | cut -d/ -f6- | grep . | tr '\n' '\0' | xargs -r0 printf '=> /%s#dir\r\n'
         find "$path" -maxdepth 1 -type f | cut -d/ -f6- | grep . | tr '\n' '\0' | xargs -r0 printf '=> /%s#file\r\n'
         find "$path" -maxdepth 1 -type l | cut -d/ -f6- | grep . | tr '\n' '\0' | xargs -r0 printf '=> /%s#link\r\n'
       fi
     fi
     ;;
   *)
     if [ -x "$path" ];then
       if [ "$user" ];then
         printf "47 CGIs for users not implemented yet\r\n"
       else
         "$path"
       fi
     else
       printf "20 %s\r\n" "$CONTENT_TYPE"
       cat -- "$path"
     fi
     ;;
  esac
else
  if [ -x "${DOCUMENT_ROOT}/.rewrite" ];then
    "${DOCUMENT_ROOT}/.rewrite"
  else
    printf "40 text/plain\r\nI don't know what you mean."
  fi
fi
